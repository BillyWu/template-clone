// Generated by CoffeeScript 1.4.0
var clone, debug, fs, mkdirp, path, url;

fs = require('fs');

path = require('path');

url = require('url');

mkdirp = require('mkdirp');

debug = require('debug')('template-clone');

clone = function(src) {
  var obj, prop, val;
  if (typeof src !== 'object') {
    return;
  }
  if (Array.isArray(src)) {
    return src.slice();
  }
  obj = {};
  for (prop in src) {
    val = src[prop];
    obj[prop] = val;
  }
  return obj;
};

/*

A simple connect middleware to serve CoffeeScript files.

@param {Object} options
@return {Function}
@api public
*/


module.exports = function(options) {
  var baseDir, dest, src, _ref;
  if (options == null) {
    options = {};
  }
  if (typeof options === 'string') {
    options = {
      src: options
    };
  }
  baseDir = options.baseDir || process.cwd();
  src = options.src;
  if (!src) {
    throw new Error('template-clone middleware requires "src" directory');
  }
  src = path.resolve(baseDir, src);
  
  dest = options.dest ? options.dest : src;
  dest = path.resolve(baseDir, dest);
  return function(req, res, next) {
    var srcPath, clone, error, destPath, pathname;
    if ('GET' !== req.method && 'HEAD' !== req.method) {
      return next();
    }
    pathname = url.parse(req.url).pathname;
    // if (/\.png$/.test(pathname)) {
    //   destPath = path.join(dest, pathname);
    //   srcPath = path.join(src, pathname);

    //   console.log(srcPath);
    //   fs.createReadStream(srcPath).pipe(fs.createWriteStream(destPath));
    // };
    if (/\.html|\.png$/.test(pathname)) {
      destPath = path.join(dest, pathname);
      srcPath = path.join(src, pathname);
      error = function(err) {
        var arg;
        arg = 'ENOENT' === err.code ? null : err;
        return next(arg);
      };
      clone = function() {
        debug('read %s', srcPath);
        return fs.exists(srcPath, function(exists){
          if (!exists) {
            return error(new Error(srcPath + ' not exists'));
          }
          return mkdirp(path.dirname(destPath), 0x1c0, function(err){
            if (err) {
              return error(err);
            }
            fs.createReadStream(srcPath).pipe(fs.createWriteStream(destPath));
          });
        });
        
        /*
        debug('read %s', srcPath);
        return fs.readFile(srcPath, 'utf8', function(err, str) {
          if (err) {
            return error(err);
          }
          debug('render %s', srcPath);
          return mkdirp(path.dirname(destPath), 0x1c0, function(err) {
            if (err) {
              return error(err);
            }
            return fs.writeFile(destPath, str, 'utf8', next);
          });
        });
        */
      };
      if (options.force) {
        return clone();
      }
      return fs.stat(srcPath, function(err, srcStats) {
        if (err) {
          return error(err);
        }
        return fs.stat(destPath, function(err, destStats) {
          if (err) {
            if ('ENOENT' === err.code) {
              debug('not found %s', destPath);
              return clone();
            } else {
              return next(err);
            }
          } else {
            if (srcStats.mtime > destStats.mtime) {
              debug('modified %s', destPath);
              return clone();
            } else {
              return next();
            }
          }
        });
      });
    } else {
      return next();
    }
  };
};
